<?php

/**
 * @file
 * Contains custom code necessary for SW migrations.
 */

use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Row;

/**
 * Migrate callback function to map story weights into the new values.
 *
 * @param array $story_weight
 *   Nested array keyed by 'value' and 'delta'. We only care about the value.
 *
 * @return integer
 *   The story weight in D8 (-10 to 10) based on the D6 values (-5 to 5).
 */
function sw_migrate_story_weight_map(array $story_weight) {
  switch ($story_weight['value']) {
    case -5:
      return -9;
    case -4:
      return -6;
    case -3:
      return -3;
    case -2:
      return -1;
    case -1:
      return 1;
    case 0:
      return 3;
    case 1:
      return 5;
    case 2:
      return 7;
    case 3:
      return 8;
    case 4:
      return 9;
    case 5:
      return 10;
  }
}

/**
 * Implements hook_migrate_MIGRATION_ID_prepare_row() for 'upgrade_d6_file'.
 *
 * If the D6 {files} table has an empty timestamp, lookup the creation date of
 * the image node the file is attached to (if possible).
 */
function sw_migrate_migrate_upgrade_d6_file_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $values = $row->getSource();
  $img_timestamp = 0;
  if (empty($values['timestamp'])) {
    $img_timestamp = $source
      ->getDatabase()
      ->query('SELECT n.created FROM {content_type_image} c INNER JOIN {node} n ON c.vid = n.vid WHERE c.field_image_fid = :fid', [
        ':fid' => $values['fid']
      ])
      ->fetchField();
  }
  $row->setSourceProperty('img_timestamp', $img_timestamp);
}

/**
 * Implements hook_migrate_MIGRATION_ID_prepare_row() for 'upgrade_d6_taxonomy_term'.
 *
 * Count the number of nodes associated with each term.
 *
 * Set a 'valid_term' property in the source row only if the vocabulary is
 * 'Topics' or 'Image galleries' (where we always preserve the terms) or the
 * term is associated with at least 1 node.
 *
 * @see http://tasks.socialistworker.org/node/983
 */
function sw_migrate_migrate_upgrade_d6_taxonomy_term_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $values = $row->getSource();
  $node_count = $source->getDatabase()
      ->query('SELECT COUNT(*) FROM {term_node} tn INNER JOIN {node} n ON tn.vid = n.vid WHERE tn.tid = :tid', [
        ':tid' => $values['tid']
      ])
      ->fetchField();
  $row->setSourceProperty('node_count', $node_count);
  // Terms from topic (2) and image gallery (14) are always valid.
  // Otherwise, this term is only worth migrating if it has nodes.
  $valid_term = $values['vid'] == 2 || $values['vid'] == 14 || !empty($node_count);
  $row->setSourceProperty('valid_term', $valid_term ? 1 : 0);
}

/**
 * Migrate callback function to deal with taxonomy term IDs.
 *
 * This prunes terms from the Department/Section and Story type vocabularies
 * that we no longer need in SW 3.0.
 *
 * @param string $tid_vid_duple
 *   A string containing the D6 term ID (TID) and vocabulary ID (VID)
 *   delimited by '\'.  This gets around a limitation that the 'callback'
 *   process can only pass a single argument.
 *
 * @return integer
 *   The term ID we want to use, or 0 to drop this term.
 */
function sw_migrate_term_id_map($tid_vid_duple) {
  list ($tid, $vid) = explode('\\', $tid_vid_duple);
  switch ($vid) {
    case 1: // 2.0 Department ("Section" in 3.0)
      switch ($tid) {
        case 6:     // History and Traditions
        case 7:     // Labor
        case 8:     // Activist News
        case 9:     // Readers' Views
        case 11:    // Editorials
        case 17255: // Obrero Socialista
          return $tid;
        // Otherwise, drop the term.
        default:
          return 0;
      }
      break;

    case 10: // Story type
      switch ($tid) {
        case 391:   // Analysis: will be re-purposed into 'Custom'
        case 393:   // Interview
        case 4556:  // Obituary
        case 2922:  // Roundtable
          return $tid;
        // Otherwise, drop the term.
        default:
          return 0;
      }
      break;

      // All other vocabularies, we want to create all terms.
      // @todo Is that actually true? Should we be more smart?
    default:
      return $tid;
  }
}

/**
 * Migrate callback function to (potentially) rename taxonomy terms.
 *
 * @param string $tid_name_duple
 *   A string containing the D6 term ID (TID) and term name delimited by '\'.
 *   This gets around a limitation that the 'callback' process can only pass a
 *   single argument.
 *
 * @return string
 *   The name we want to use for this term.
 */
function sw_migrate_term_name_map($tid_name_duple) {
  list ($tid, $name) = explode('\\', $tid_name_duple);
  switch ($tid) {
    case 391:
      return 'Custom';

    default:
      return $name;
  }
}

/**
 * Migrate callback function to (potentially) remap node/taxonomy term associations.
 *
 * @param integer $tid
 *   The term ID we're about to associate with a node.
 *
 * @return integer
 *   The term ID we actually want to use, or 0 to drop this term/node association.
 */
function sw_migrate_term_node_map($tid) {
  switch ($tid) {
    // Subterms of 'History and Traditions' are merging into their parent term.
    case 14:     // History/Paul D'Amato
    case 11172:  // History/Todd Chretien
      return 6;
      
    // 'Analysis' story type. This is being ditched in SW 3.0.  However, we're
    // converting this tid into the 'Custom' story type (so all the custom
    // code can already know what the ID will be). So, any story that is
    // classified with this should ignore it and have no story type.
    case 391:
      return 0;
  }

  // Otherwise, leave it alone and use whatever we were given. The migration
  // will check against the successfully imported terms, so other sections
  // and story types that were purged will be ignored.
  return $tid;
}

/**
 * Migrate callback function to try to find the first <dme:img> tag.
 *
 * This is used to populate field_main_image.
 *
 * @param string $body
 *   The D6 value of field_body.
 *
 * @return integer
 *   The media ID of the main image for this story (or 0 if there is none).
 */
function sw_migrate_find_first_dme_img($body) {
  $matches = [];
  return preg_match('@<dme:img nid=(\d+)@', $body, $matches) ? $matches[1] : 0;
}

/**
 * Migrate callback function to rewrite the D6 body field on story nodes.
 *
 * Currently, this only rewrites long chains of '- - -'... into <hr /> tags.
 * @todo: Rewrite and move <dme:*> tags into something else.
 *
 * @param string $d6_body
 *   The D6 value of field_body.
 *
 * @return string
 *   The appropriate value for field_body in SW 3.0 (D8).
 */
function sw_migrate_rewrite_story_body($d6_body) {
  // 1 or more instances of '- ' and an optional trailing '-' with '<hr />':
  return preg_replace('#(- )+(-)?#', '<hr />', $d6_body);
}
